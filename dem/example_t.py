"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct


class example_t(object):
    __slots__ = ["timestamp", "YRS_YawRateSensorState", "YRS_LateralSensorState", "YRS_LateralAcce", "YRS_YawRate", "YRS_LongitSensorState", "YRS_LongitAcce", "SAS_SteerWheelAngle", "SAS_SteerWheelRotSpd", "SAS_CalibrationSts", "SAS_FailureSts", "EPS_ModSts", "EPS_TorsionBarTorque", "EPS_TorsionBarTorqueDir", "EPS_TorsionBarTorqueValid", "EPS_LDW_ControlSts", "EPS_LKS_ControlSts", "ESC_ABSActive", "ESC_BrakePedalSwitchStatus", "ESC_ESPActive", "ESC_VehicleSpeed", "ESC_PATAResponse", "ESC_VehicleSpeedInvalid", "ESC_BrakePedalSwitchInvalid", "EMS_Real_PedalPositionInvalid", "EMS_Real_PedalPosition", "MMI_Nav_SpeedLimit", "MMI_Nav_RampSts", "MMI_Nav_CurrRoadType", "MMI_Nav_SpeedLimitSts", "MMI_Nav_CountryID", "GPS_Longitude_Info", "GPS_Longitude_Orientaiton_Sts", "GPS_Longitude_Sts", "GPS_Latitude_info", "GPS_Latitude_Orientaiton_Sts", "GPS_Latitude_Sts", "FRS_ObjFront1_Dx", "FRS_ObjFront1_Dy", "FRS_ObjFront1_Type", "FRS_ObjFront1_Color", "FRS_ObjFront1_Warning", "FRS_ObjFront2_Dx", "FRS_ObjFront2_Dy", "FRS_ObjFront2_Type", "FRS_ObjFront2_Color", "FRS_ObjFrontLeft_Dx", "FRS_ObjFrontLeft_Dy", "FRS_ObjFrontLeft_Type", "FRS_ObjFrontLeft_Color", "FRS_ObjFrontRight_Dx", "FRS_ObjFrontRight_Dy", "FRS_ObjFrontRight_Type", "FRS_ObjFrontRight_Color", "FCS_LineLeft_D", "FCS_LineLeft_Type", "FCS_LineLeft_Warning", "FCS_LineLeft_Color", "FCS_LineRight_Color", "FCS_LineRight_Warning", "FCS_LineRight_D", "FCS_LineRight_Type", "FCS_Lane_Radium", "FCS_LaneCenter_Color"]

    def __init__(self):
        self.timestamp = 0
        self.YRS_YawRateSensorState = 0
        self.YRS_LateralSensorState = 0
        self.YRS_LateralAcce = 0.0
        self.YRS_YawRate = 0.0
        self.YRS_LongitSensorState = 0
        self.YRS_LongitAcce = 0.0
        self.SAS_SteerWheelAngle = 0.0
        self.SAS_SteerWheelRotSpd = 0
        self.SAS_CalibrationSts = False
        self.SAS_FailureSts = False
        self.EPS_ModSts = 0
        self.EPS_TorsionBarTorque = 0.0
        self.EPS_TorsionBarTorqueDir = False
        self.EPS_TorsionBarTorqueValid = False
        self.EPS_LDW_ControlSts = 0
        self.EPS_LKS_ControlSts = 0
        self.ESC_ABSActive = False
        self.ESC_BrakePedalSwitchStatus = False
        self.ESC_ESPActive = False
        self.ESC_VehicleSpeed = 0.0
        self.ESC_PATAResponse = False
        self.ESC_VehicleSpeedInvalid = False
        self.ESC_BrakePedalSwitchInvalid = False
        self.EMS_Real_PedalPositionInvalid = False
        self.EMS_Real_PedalPosition = 0.0
        self.MMI_Nav_SpeedLimit = 0
        self.MMI_Nav_RampSts = 0
        self.MMI_Nav_CurrRoadType = 0
        self.MMI_Nav_SpeedLimitSts = 0
        self.MMI_Nav_CountryID = 0
        self.GPS_Longitude_Info = 0
        self.GPS_Longitude_Orientaiton_Sts = False
        self.GPS_Longitude_Sts = False
        self.GPS_Latitude_info = 0
        self.GPS_Latitude_Orientaiton_Sts = False
        self.GPS_Latitude_Sts = False
        self.FRS_ObjFront1_Dx = 0
        self.FRS_ObjFront1_Dy = 0.0
        self.FRS_ObjFront1_Type = 0
        self.FRS_ObjFront1_Color = 0
        self.FRS_ObjFront1_Warning = False
        self.FRS_ObjFront2_Dx = 0
        self.FRS_ObjFront2_Dy = 0.0
        self.FRS_ObjFront2_Type = 0
        self.FRS_ObjFront2_Color = 0
        self.FRS_ObjFrontLeft_Dx = 0
        self.FRS_ObjFrontLeft_Dy = 0.0
        self.FRS_ObjFrontLeft_Type = 0
        self.FRS_ObjFrontLeft_Color = 0
        self.FRS_ObjFrontRight_Dx = 0
        self.FRS_ObjFrontRight_Dy = 0.0
        self.FRS_ObjFrontRight_Type = 0
        self.FRS_ObjFrontRight_Color = 0
        self.FCS_LineLeft_D = 0.0
        self.FCS_LineLeft_Type = 0
        self.FCS_LineLeft_Warning = False
        self.FCS_LineLeft_Color = 0
        self.FCS_LineRight_Color = 0
        self.FCS_LineRight_Warning = False
        self.FCS_LineRight_D = 0.0
        self.FCS_LineRight_Type = 0
        self.FCS_Lane_Radium = 0
        self.FCS_LaneCenter_Color = 0

    def encode(self):
        buf = BytesIO()
        buf.write(example_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ibbffbffhbbbfbbbbbbbfbbbbfhbbbbibbibbhfbbbhfbbhfbbhfbbfbbbbbfbhb", self.timestamp, self.YRS_YawRateSensorState, self.YRS_LateralSensorState, self.YRS_LateralAcce, self.YRS_YawRate, self.YRS_LongitSensorState, self.YRS_LongitAcce, self.SAS_SteerWheelAngle, self.SAS_SteerWheelRotSpd, self.SAS_CalibrationSts, self.SAS_FailureSts, self.EPS_ModSts, self.EPS_TorsionBarTorque, self.EPS_TorsionBarTorqueDir, self.EPS_TorsionBarTorqueValid, self.EPS_LDW_ControlSts, self.EPS_LKS_ControlSts, self.ESC_ABSActive, self.ESC_BrakePedalSwitchStatus, self.ESC_ESPActive, self.ESC_VehicleSpeed, self.ESC_PATAResponse, self.ESC_VehicleSpeedInvalid, self.ESC_BrakePedalSwitchInvalid, self.EMS_Real_PedalPositionInvalid, self.EMS_Real_PedalPosition, self.MMI_Nav_SpeedLimit, self.MMI_Nav_RampSts, self.MMI_Nav_CurrRoadType, self.MMI_Nav_SpeedLimitSts, self.MMI_Nav_CountryID, self.GPS_Longitude_Info, self.GPS_Longitude_Orientaiton_Sts, self.GPS_Longitude_Sts, self.GPS_Latitude_info, self.GPS_Latitude_Orientaiton_Sts, self.GPS_Latitude_Sts, self.FRS_ObjFront1_Dx, self.FRS_ObjFront1_Dy, self.FRS_ObjFront1_Type, self.FRS_ObjFront1_Color, self.FRS_ObjFront1_Warning, self.FRS_ObjFront2_Dx, self.FRS_ObjFront2_Dy, self.FRS_ObjFront2_Type, self.FRS_ObjFront2_Color, self.FRS_ObjFrontLeft_Dx, self.FRS_ObjFrontLeft_Dy, self.FRS_ObjFrontLeft_Type, self.FRS_ObjFrontLeft_Color, self.FRS_ObjFrontRight_Dx, self.FRS_ObjFrontRight_Dy, self.FRS_ObjFrontRight_Type, self.FRS_ObjFrontRight_Color, self.FCS_LineLeft_D, self.FCS_LineLeft_Type, self.FCS_LineLeft_Warning, self.FCS_LineLeft_Color, self.FCS_LineRight_Color, self.FCS_LineRight_Warning, self.FCS_LineRight_D, self.FCS_LineRight_Type, self.FCS_Lane_Radium, self.FCS_LaneCenter_Color))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != example_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return example_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = example_t()
        self.timestamp, self.YRS_YawRateSensorState, self.YRS_LateralSensorState, self.YRS_LateralAcce, self.YRS_YawRate, self.YRS_LongitSensorState, self.YRS_LongitAcce, self.SAS_SteerWheelAngle, self.SAS_SteerWheelRotSpd = struct.unpack(">ibbffbffh", buf.read(25))
        self.SAS_CalibrationSts = bool(struct.unpack('b', buf.read(1))[0])
        self.SAS_FailureSts = bool(struct.unpack('b', buf.read(1))[0])
        self.EPS_ModSts, self.EPS_TorsionBarTorque = struct.unpack(">bf", buf.read(5))
        self.EPS_TorsionBarTorqueDir = bool(struct.unpack('b', buf.read(1))[0])
        self.EPS_TorsionBarTorqueValid = bool(struct.unpack('b', buf.read(1))[0])
        self.EPS_LDW_ControlSts, self.EPS_LKS_ControlSts = struct.unpack(">bb", buf.read(2))
        self.ESC_ABSActive = bool(struct.unpack('b', buf.read(1))[0])
        self.ESC_BrakePedalSwitchStatus = bool(struct.unpack('b', buf.read(1))[0])
        self.ESC_ESPActive = bool(struct.unpack('b', buf.read(1))[0])
        self.ESC_VehicleSpeed = struct.unpack(">f", buf.read(4))[0]
        self.ESC_PATAResponse = bool(struct.unpack('b', buf.read(1))[0])
        self.ESC_VehicleSpeedInvalid = bool(struct.unpack('b', buf.read(1))[0])
        self.ESC_BrakePedalSwitchInvalid = bool(struct.unpack('b', buf.read(1))[0])
        self.EMS_Real_PedalPositionInvalid = bool(struct.unpack('b', buf.read(1))[0])
        self.EMS_Real_PedalPosition, self.MMI_Nav_SpeedLimit, self.MMI_Nav_RampSts, self.MMI_Nav_CurrRoadType, self.MMI_Nav_SpeedLimitSts, self.MMI_Nav_CountryID, self.GPS_Longitude_Info = struct.unpack(">fhbbbbi", buf.read(14))
        self.GPS_Longitude_Orientaiton_Sts = bool(struct.unpack('b', buf.read(1))[0])
        self.GPS_Longitude_Sts = bool(struct.unpack('b', buf.read(1))[0])
        self.GPS_Latitude_info = struct.unpack(">i", buf.read(4))[0]
        self.GPS_Latitude_Orientaiton_Sts = bool(struct.unpack('b', buf.read(1))[0])
        self.GPS_Latitude_Sts = bool(struct.unpack('b', buf.read(1))[0])
        self.FRS_ObjFront1_Dx, self.FRS_ObjFront1_Dy, self.FRS_ObjFront1_Type, self.FRS_ObjFront1_Color = struct.unpack(">hfbb", buf.read(8))
        self.FRS_ObjFront1_Warning = bool(struct.unpack('b', buf.read(1))[0])
        self.FRS_ObjFront2_Dx, self.FRS_ObjFront2_Dy, self.FRS_ObjFront2_Type, self.FRS_ObjFront2_Color, self.FRS_ObjFrontLeft_Dx, self.FRS_ObjFrontLeft_Dy, self.FRS_ObjFrontLeft_Type, self.FRS_ObjFrontLeft_Color, self.FRS_ObjFrontRight_Dx, self.FRS_ObjFrontRight_Dy, self.FRS_ObjFrontRight_Type, self.FRS_ObjFrontRight_Color, self.FCS_LineLeft_D, self.FCS_LineLeft_Type = struct.unpack(">hfbbhfbbhfbbfb", buf.read(29))
        self.FCS_LineLeft_Warning = bool(struct.unpack('b', buf.read(1))[0])
        self.FCS_LineLeft_Color, self.FCS_LineRight_Color = struct.unpack(">bb", buf.read(2))
        self.FCS_LineRight_Warning = bool(struct.unpack('b', buf.read(1))[0])
        self.FCS_LineRight_D, self.FCS_LineRight_Type, self.FCS_Lane_Radium, self.FCS_LaneCenter_Color = struct.unpack(">fbhb", buf.read(8))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if example_t in parents: return 0
        tmphash = (0x527d21b50cad2522) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if example_t._packed_fingerprint is None:
            example_t._packed_fingerprint = struct.pack(">Q", example_t._get_hash_recursive([]))
        return example_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

